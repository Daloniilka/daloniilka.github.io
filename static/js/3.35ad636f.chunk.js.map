{"version":3,"sources":["components/Profile/StyleProfile/Profile.module.css","components/Profile/ProfileInfo/StyleProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileData/StyleProfileData/ProfileData.module.css","components/Profile/ProfileInfo/ProfileStatus/StyleProfileStatus/ProfileStatus.module.css","components/Profile/ProfileInfo/ProfileDataForm/StyleProfileDataForm/ProfileDataForm.module.css","components/Profile/MyPost/StyleMyPost/Mypost.module.css","components/Profile/MyPost/Post/StylePost/Post.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatusHooks.tsx","components/Profile/ProfileInfo/ProfileData/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/Mypost.tsx","components/Profile/MyPost/MypostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainet.tsx"],"names":["module","exports","ProfileStatusHooks","props","view","double","valid","useState","editMode","setEditMode","status","setStatus","useEffect","length","e","currentTarget","value","owner","newstatusreloader","onDoubleClick","className","s","text_status","status_container","onBlur","updateProfileStatus","autoFocus","onChange","error_lenght","content","ProfileData","f","w","v","t","i","y","g","all","profile","contacts","facebook","href","target","website","vk","twitter","instagram","youtube","github","no_status","about","text_about","aboutMe","contact","work","lookingForAJobDescription","divs","avtar","src","photos","large","userPhoto","alt","info_profile","name","fullName","onClick","goEditmod","Preloader","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","error","Field","input","component","Input","placeholder","write","TextArea","Object","keys","map","key","contacs","file","type","files","savePhoto","ProfileInfo","initialValues","formData","saveProfile","then","Post","link","id","div","ex","message","re","to","span","activeClassName","heart","like","maxLengh","maxLenghtCrater","MyPost","React","memo","postElement","ProfilePage","post","reverse","p","ReduxPostForm","text","addPost","textarea","onSubmitSuccess","result","dispatch","reset","validate","required","button","MyPostContainer","connect","state","profilePage","actions","Profile","page","reloader","ProfileContainet","userId","this","match","params","autorizedUserId","history","push","getProfileStatus","getProfile","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter","withAuthRederect"],"mappings":"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","file":"static/js/3.35ad636f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__3Wk_h\",\"ex\":\"Profile_ex__2LCHS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileInfo_content__1Vt9F\",\"divs\":\"ProfileInfo_divs__13OLu\",\"avtar\":\"ProfileInfo_avtar__1bPGv\",\"info_profile\":\"ProfileInfo_info_profile__V8enj\",\"no_status\":\"ProfileInfo_no_status__2ODB-\",\"name\":\"ProfileInfo_name__3M46f\",\"about\":\"ProfileInfo_about__1F6Wi\",\"text_about\":\"ProfileInfo_text_about__39Gfw\",\"contact\":\"ProfileInfo_contact__2yLNq\",\"loginblock\":\"ProfileInfo_loginblock__3tWAX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileData_content__25hJB\",\"divs\":\"ProfileData_divs__3ev1E\",\"avtar\":\"ProfileData_avtar__2aGmp\",\"info_profile\":\"ProfileData_info_profile__1awXr\",\"no_status\":\"ProfileData_no_status__7Mp5q\",\"name\":\"ProfileData_name__3v71e\",\"about\":\"ProfileData_about__13YHs\",\"text_about\":\"ProfileData_text_about__2Sb7z\",\"contact\":\"ProfileData_contact__1plwi\",\"work\":\"ProfileData_work__Iizez\",\"loginblock\":\"ProfileData_loginblock__aWHcD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"ProfileStatus_content__2v4o5\",\"text_status\":\"ProfileStatus_text_status__vmSAl\",\"status_container\":\"ProfileStatus_status_container__TkIch\",\"status\":\"ProfileStatus_status__3q6W9\",\"error_lenght\":\"ProfileStatus_error_lenght__O3ZLd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacs\":\"ProfileDataForm_contacs__6Ad79\",\"input\":\"ProfileDataForm_input__F7M6n\",\"write\":\"ProfileDataForm_write__3iRdr\",\"file\":\"ProfileDataForm_file__3OMFa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Mypost_button__1f4-9\",\"write\":\"Mypost_write__3SVZV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ex\":\"Post_ex__1y69a\",\"re\":\"Post_re__3IAHU\",\"span\":\"Post_span__18y-B\",\"heart\":\"Post_heart__4Aety\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport s from './StyleProfileStatus/ProfileStatus.module.css';\nimport FollowPreloader from \"../../../common/Followpreloader/FolloPreloader\";\n\n\ntype Props = {\n    status: string\n    updateProfileStatus: (status: string) => void\n    owner: boolean\n    newstatusreloader: boolean\n\n}\n\n\nconst ProfileStatusHooks: React.FC<Props> = (props) => {\n\n\n    let [editMode, setEditMode] = useState(false)\n\n    let [status, setStatus] = useState(props.status)\n    let view: any, double: any, valid: any\n\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateProfileStatus(status)\n\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n\n    }\n\n    if (status.length >= 300) {\n        valid = \"\"\n    } else {\n        valid = onStatusChange\n    }\n\n\n    {\n        props.owner ? double = activateEditMode : double = \"no\"\n    }\n\n    if (props.newstatusreloader == false) {\n        view = <div>\n            {!editMode &&\n            <div>\n            <span onDoubleClick={double}>\n                <p>Status</p>\n                <span className={s.text_status}>{props.status || \"\"}</span> </span>\n            </div>\n            }\n            {editMode &&\n            <div className={s.status_container}>\n            <textarea className={s.status} onBlur={deactivateEditMode} value={status} autoFocus={true}\n                      onChange={valid}/>\n                <div>\n                    {status && status.length >= 300 ? <span className={s.error_lenght}>Max Lenght 300 </span> : \"\"}\n                </div>\n\n            </div>\n            }\n        </div>\n    } else {\n        view = <FollowPreloader/>\n\n    }\n\n\n    return (\n        <div className={s.content}>\n            {view}\n        </div>\n\n    )\n\n}\n\n\nexport default ProfileStatusHooks","import s from './StyleProfileData/ProfileData.module.css';\nimport userPhoto from \"../../../../assets/img/user.png\"\nimport Preloader from \"../../../common/Preloader/Preloader\";\nimport ProfileStatusHooks from \"../ProfileStatus/ProfileStatusHooks\";\nimport {AllProfileType} from \"../../../../Types/Types\";\nimport React, {ChangeEvent} from \"react\";\nimport {Button} from \"antd\";\n\n\nconst ProfileData: React.FC<AllProfileType> = (props) => {\n\n    let f, w, v, t, i, y, g, all\n\n\n    if (!props.profile) {\n        return <Preloader/>\n    }\n\n    {\n        !props.profile.contacts.facebook ? f = \"\" : f =\n            <span><a href={props.profile.contacts.facebook} target=\"_blank\">Facebook</a></span>\n    }\n    {\n        !props.profile.contacts.website ? w = \"\" : w =\n            <span><a href={props.profile.contacts.website} target=\"_blank\">Website</a></span>\n    }\n    {\n        !props.profile.contacts.vk ? v = \"\" : v =\n            <span> <a href={props.profile.contacts.vk} target=\"_blank\">VK</a></span>\n    }\n    {\n        !props.profile.contacts.twitter ? t = \"\" : t =\n            <span><a href={props.profile.contacts.twitter} target=\"_blank\">Twitter</a></span>\n    }\n    {\n        !props.profile.contacts.instagram ? i = \"\" : i =\n            <span><a href={props.profile.contacts.instagram} target=\"_blank\">Instagram</a></span>\n    }\n    {\n        !props.profile.contacts.youtube ? y = \"\" : y =\n            <span> <a href={props.profile.contacts.youtube} target=\"_blank\">Youtube</a></span>\n    }\n    {\n        !props.profile.contacts.github ? g = \"\" : g =\n            <span> <a href={props.profile.contacts.github} target=\"_blank\">Github</a></span>\n    }\n\n\n    all = <div className={s.no_status}>\n        <p className={s.about}><span className={s.text_about}>About: {props.profile.aboutMe}</span></p>\n        <p className={s.contact}>Contact:\n            {f}{w}{v}{t}{i}{y}{g}\n        </p>\n        <p className={s.work}>Work status: {props.profile.lookingForAJobDescription}</p>\n\n    </div>\n\n\n    return (\n        <div className={s.content}>\n\n            <div className={s.divs}>\n\n                <div className={s.avtar}>\n                    <img src={props.profile.photos.large != null ? props.profile.photos.large : userPhoto} alt=\"\"/>\n                </div>\n\n                <div className={s.info_profile}>\n                    <p className={s.name}>{props.profile.fullName}</p>\n                    {all}\n                    <ProfileStatusHooks status={props.status} updateProfileStatus={props.updateProfileStatus}\n                                        newstatusreloader={props.newstatusreloader} owner={props.owner}\n                    />\n\n                </div>\n                {props.owner && <div>\n                    <Button onClick={props.goEditmod}>Edit</Button>\n                </div>}\n            </div>\n\n        </div>\n\n    )\n}\nexport default ProfileData","import {createField, Input, TextArea} from \"../../../common/FormsControl/FormContorl\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport React, {ChangeEvent} from \"react\";\nimport {ProfileType} from \"../../../../Types/Types\";\nimport s from './StyleProfileDataForm/ProfileDataForm.module.css'\nimport {Button} from \"antd\";\n\ntype Props = {\n    profile: ProfileType\n    initialValues: ProfileType\n    savePhoto: (file: File) => void;\n    owner: any\n\n}\n\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, Props> & Props> = (props) => {\n    const mainPhoto = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n\n            props.savePhoto(e.target.files[0])\n        }\n    }\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Button>Save</Button>\n            {props.error &&\n            <div> {props.error}</div>}\n            <div>\n                <b>Your name</b>:<Field className={s.input} component={Input}\n                                        placeholder={\"Your name\"}\n                                        name={`fullName`}/>\n            </div>\n\n            <div>\n                <b>About</b><Field className={s.write} component={TextArea}\n                                   placeholder={\"About\"}\n                                   name={`aboutMe`}/>\n\n            </div>\n\n            <div>\n                <div>\n                    <b>Contact</b>:{Object.keys(props.profile.contacts).map(key => {\n                    return <div key={key} className={s.contacs}>\n                        <b>{key}: <Field className={s.input} component={Input}\n                                         placeholder={key}\n                                         name={`contacts.${key}`}/>\n                        </b>\n                    </div>\n                })}\n                </div>\n\n            </div>\n\n            <div>\n                <b>Work\n                    status</b>:<Field className={s.write} component={TextArea}\n                                      placeholder={\"Work status\"}\n                                      name={`lookingForAJobDescription`}/>\n\n            </div>\n            <div className={s.file}>\n                {props.owner && <input type={\"file\"} onChange={mainPhoto}/>}\n            </div>\n\n\n        </form>\n    )\n}\n\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, Props>({form: \"edit-profile\"})(ProfileDataForm)\n\n\nexport default ProfileDataFormReduxForm","import s from './StyleProfileInfo/ProfileInfo.module.css';\nimport React, {useState} from \"react\";\nimport ProfileData from \"./ProfileData/ProfileData\";\nimport ProfileDataFormReduxForm from \"./ProfileDataForm/ProfileDataForm\";\nimport {AllProfileType, ProfileType} from \"../../../Types/Types\";\n\n\nconst ProfileInfo: React.FC<AllProfileType> = (props) => {\n\n\n    let [editMode, setEditMode] = useState(false)\n\n    const onSubmit = (formData: ProfileType) => {\n        props.saveProfile(formData).then(() => {\n            setEditMode(false)\n\n        })\n    }\n    return (\n        <div className={s.content}>\n\n            {editMode ?  <ProfileDataFormReduxForm initialValues={props.profile} {...props} onSubmit={onSubmit}/> :\n                <ProfileData {...props} goEditmod={() => {\n                    setEditMode(true)\n                }}/>}\n\n\n        </div>\n\n    )\n}\n\n\nexport default ProfileInfo","import {NavLink} from 'react-router-dom';\nimport s from './StylePost/Post.module.css';\nimport React from \"react\";\n\n\ntype Props = {\n    id: number\n    message: string\n    like: number\n}\n\nconst Post: React.FC<Props> = (props) => {\n    let link = \"/profile/\" + props.id;\n\n\n    return (\n\n        <div className={`${s.div} ${s.ex}`}>\n            <a href=\"#\"> <img\n                src=\"https://ru-static.z-dn.net/files/d88/d7d8682550c7d82c06aa04031bd7cda4.jpeg\"></img></a>\n            <p>{props.message}</p><br/>\n            <div className={s.re}>\n                <NavLink to={link} className={s.span} activeClassName={s.heart}> </NavLink>\n            </div>\n\n            <p>{props.like}</p>\n        </div>\n\n\n    );\n}\n\n\nexport default Post","import React from 'react';\nimport s from './StyleMyPost/Mypost.module.css';\nimport Post from './Post/Post';\nimport {Field, InjectedFormProps, reduxForm, reset} from \"redux-form\";\nimport {maxLenghtCrater, required} from \"../../../Utils/Validators/validator\";\nimport {createField, TextArea} from \"../../common/FormsControl/FormContorl\";\nimport {initialStateType} from \"../../../Redux/profile-reducer\";\nimport {PostType, ProfileType} from \"../../../Types/Types\";\nimport {DialogsNewMessegeType} from \"../../Dialogs/Dialogs\";\n\nconst maxLengh = maxLenghtCrater(1024)\n\ntype Props = {\n    ProfilePage: initialStateType\n    addPost: (message: string) => void\n\n}\n\nexport type MyPostNewMessegeType = {\n    textarea: string\n}\n\nconst MyPost: React.FC<Props> = React.memo(props => {\n\n    let postElement = [...props.ProfilePage.post].reverse().map(p => <Post id={p.id} message={p.message}\n                                                                           like={p.like}/>);\n\n    let onposttext = (text: MyPostNewMessegeType) => {\n        props.addPost(text.textarea)\n    }\n\n\n    return (\n        <div className={s.div}>\n            <p>Creat post: </p>\n            <div className={s.div}>\n                <ReduxPostForm onSubmit={onposttext}/>\n            </div>\n            <div className={s.post}>\n                <div>{postElement}  </div>\n\n            </div>\n        </div>\n    );\n});\n\nconst afterSubmit = (result: string, dispatch: Function) =>\n    dispatch(reset('post'));\n\n\ntype PropsType = {}\n\nconst PostForm: React.FC<InjectedFormProps<MyPostNewMessegeType, PropsType> & PropsType> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field placeholder=\"Post..\" name=\"textarea\"\n                   validate={[required, maxLengh]}\n                   component={TextArea} className={s.write}/>\n            <br/>\n            <button className={s.button}>Add post</button>\n        </form>\n    )\n}\n\nconst ReduxPostForm = reduxForm<MyPostNewMessegeType>({\n    form: 'post',\n    onSubmitSuccess: afterSubmit,\n})\n(PostForm)\n\n\nexport default MyPost\n","import {actions} from \"../../../Redux/profile-reducer\"\nimport MyPost from './Mypost';\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/redux-store\";\n\n\nlet mapStateToprops = (state: AppStateType) => {\n    return {\n        ProfilePage: state.profilePage,\n    }\n}\n\n\nconst MyPostContainer = connect(mapStateToprops,\n    {\n        addPost: actions.addPost,\n    })\n(MyPost);\n\n\nexport default MyPostContainer;\n","import s from './StyleProfile/Profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostContainer from './MyPost/MypostContainer';\nimport Preloader from \"../common/Preloader/Preloader\";\nimport React from \"react\";\nimport {AllProfileType} from \"../../Types/Types\";\n\n\n\n\nconst Profile: React.FC<AllProfileType> = (props) => {\n    let page\n\n    if (props.reloader == false) {\n        page = <div className={s.content}>\n\n            <ProfileInfo {...props} updateProfileStatus={props.updateProfileStatus}\n                         newstatusreloader={props.newstatusreloader} owner={props.owner} savePhoto={props.savePhoto}\n                         saveProfile={props.saveProfile}/>\n            <MyPostContainer/>\n\n        </div>\n    } else {\n        page = <Preloader/>\n    }\n\n    return (\n\n        <div className={s.content}>\n            {page}\n        </div>\n    );\n}\n\nexport default Profile","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getProfile,\n    getProfileStatus,\n    initialStateType,\n    savePhoto,\n    saveProfile,\n    updateProfileStatus,\n} from \"../../Redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\nimport {withAuthRederect} from \"../../hoc/withAuthRederect\";\nimport {compose} from \"redux\";\nimport {AllProfileType, ProfileType} from \"../../Types/Types\";\nimport {AppStateType} from \"../../Redux/redux-store\";\n\ntype MapsPropsType = ReturnType<typeof mapStateToprops>\n\n\ntype PathParamsType = {\n    userId: string\n}\n\n\ntype Props = MapsPropsType & AllProfileType & RouteComponentProps<PathParamsType>\n\n\nclass ProfileContainet extends React.Component<Props> {\n\n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.autorizedUserId\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getProfileStatus(userId as number)\n        this.props.getProfile(userId as number)\n\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n\n\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: Props) {\n        if (this.props.match.params.userId != prevProps.match.params.userId)\n            this.refreshProfile()\n\n    }\n\n\n    render() {\n        return (\n            <Profile {...this.props} profile={this.props.profile} reloader={this.props.reloader}\n                     status={this.props.status} updateProfileStatus={this.props.updateProfileStatus}\n                     newstatusreloader={this.props.newstatusreloader} owner={!this.props.match.params.userId}\n                     savePhoto={this.props.savePhoto}\n            />\n        )\n    }\n}\n\n\nlet mapStateToprops = (state: AppStateType) => {\n\n    return {\n        profile: state.profilePage.profile,\n        reloader: state.profilePage.reloader,\n        status: state.profilePage.status,\n        newstatusreloader: state.profilePage.newstatusreloader,\n        autorizedUserId: state.auth.id,\n        isAuth: state.auth,\n    }\n\n\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToprops, {getProfile, getProfileStatus, updateProfileStatus, savePhoto, saveProfile}),\n    withRouter,\n    withAuthRederect,\n)(ProfileContainet)\n\n\n\n\n"],"sourceRoot":""}