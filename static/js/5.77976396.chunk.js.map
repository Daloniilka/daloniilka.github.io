{"version":3,"sources":["components/Page/Chat/StypeChat/Chat.module.css","components/Page/Chat/ChatPage.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["module","exports","ChatPage","withAuthRederect","Chat","dispatch","useDispatch","status","useSelector","state","chatPage","useEffect","startMessagesListening","stopMessagesListening","Messages","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","userId","ref","React","memo","src","photo","width","borderRadius","display","padding","fontSize","userName","AddMessageForm","setMessage","className","s","write","onChange","value","buttonchat","disabled","onClick","sendMessage"],"mappings":"mFACAA,EAAOC,QAAU,CAAC,WAAa,yBAAyB,MAAQ,sB,4HCQ1DC,EAAqBC,aAAiB,WACxC,OAAO,8BACH,cAAC,EAAD,SAKFC,EAAiB,WAEnB,IAAMC,EAAWC,cAGXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,SAASH,UASnE,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAEI,gCACS,UAAXN,GAAsB,8EACvB,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,WAKNO,EAAyB,SAAC,ICvCjB,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDsCC,IACpC,IAAMC,EAAWT,aAAY,SAACC,GAAD,OAAyBA,EAAMC,SAASO,YAC/DC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAiBA,OANAX,qBAAU,WACa,IAAD,EAAdU,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACR,IAEG,sBAAKS,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAfnC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UACFL,EAASqB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAwBC,QAASH,GAAnBA,EAAEI,WAC5C,qBAAKC,IAAK1B,QAKZuB,EAAqDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QACpE,OAAO,gCACH,qBAAKK,IAAKL,EAAQM,MAAOtB,MAAO,CAACuB,MAAO,QAASC,aAAc,UAC/D,sBAAKxB,MAAO,CAACyB,QAAS,eAAgBC,QAAS,cAA/C,UACI,mBAAG1B,MAAO,CAAC0B,QAAS,aAAcC,SAAU,QAA5C,SAAqD,4BAAIX,EAAQY,aACjE,mBAAG5B,MAAO,CAAC0B,QAAS,aAAcC,SAAU,QAA5C,SAAsDX,EAAQA,aAElE,uBAEA,uBACA,6BAKFa,EAA+B,WACjC,MAA8BnC,mBAAS,IAAvC,mBAAOsB,EAAP,KAAgBc,EAAhB,KACMnD,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,SAASH,UAWnE,OAAO,gCACH,8BACI,0BAAUkD,UAAWC,IAAEC,MAAOC,SAAU,SAAC9B,GAAD,OAAO0B,EAAW1B,EAAEE,cAAc6B,QAChEA,MAAOnB,MAErB,8BACI,wBAAQe,UAAWC,IAAEI,WAAYC,SAAqB,UAAXxD,EAAoByD,QAd5C,WAClBtB,IAGLrC,EAAS4D,YAAYvB,IACrBc,EAAW,MASP,wBAKGtD","file":"static/js/5.77976396.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonchat\":\"Chat_buttonchat__fwIHZ\",\"write\":\"Chat_write__3QX98\"};","import {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/redux-store\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../../Redux/chat-reducer\";\nimport {ChatMessageAPIType} from \"../../../API/ChatAPI\";\nimport s from './StypeChat/Chat.module.css'\nimport {withAuthRederect} from \"../../../hoc/withAuthRederect\";\n\n\nconst ChatPage: React.FC = withAuthRederect(() => {\n    return <div>\n        <Chat/>\n    </div>\n})\n\n\nconst Chat: React.FC = () => {\n\n    const dispatch = useDispatch()\n\n\n    const status = useSelector((state: AppStateType) => state.chatPage.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [])\n\n    return <div>\n        {status === 'error' && <div>Some error occured. Please refresh the page</div>}\n        <>\n            <Messages/>\n            <AddMessageForm/>\n        </>\n    </div>\n}\n\nconst Messages: React.FC<{}> = ({}) => {\n    const messages = useSelector((state: AppStateType) => state.chatPage.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget;\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages])\n\n    return <div style={{height: '700px', overflowY: 'auto'}} onScroll={scrollHandler}>\n        {messages.map((m, index) => <Message key={m.userId} message={m}/>)}\n        <div ref={messagesAnchorRef}></div>\n    </div>\n}\n\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\n    return <div>\n        <img src={message.photo} style={{width: '100px', borderRadius: '40px'}}/>\n        <div style={{display: \"inline-block\", padding: \"20px 0 0 0\"}}>\n            <p style={{padding: '0 0 0 20px', fontSize: \"18px\"}}><b>{message.userName}</b></p>\n            <p style={{padding: '0 0 0 20px', fontSize: \"16px\"}}>{message.message}</p>\n        </div>\n        <br/>\n\n        <br/>\n        <hr/>\n    </div>\n})\n\n\nconst AddMessageForm: React.FC<{}> = () => {\n    const [message, setMessage] = useState('')\n    const dispatch = useDispatch()\n\n    const status = useSelector((state: AppStateType) => state.chatPage.status)\n\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n\n    return <div>\n        <div>\n            <textarea className={s.write} onChange={(e) => setMessage(e.currentTarget.value)}\n                      value={message}></textarea>\n        </div>\n        <div>\n            <button className={s.buttonchat} disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\n        </div>\n    </div>\n}\n\nexport default ChatPage","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}